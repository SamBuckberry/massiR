\documentclass{article}

\usepackage{natbib}
\usepackage{graphics}
\usepackage{amsmath}
\usepackage{indentfirst}
\usepackage[utf8]{inputenc}

% \VignetteIndexEntry{massiR_Example}

\begin{document}
\SweaveOpts{concordance=TRUE}

\title{massiR: MicroArray Sample Sex Identifier}
\author{Sam Buckberry}
\maketitle

\section{The Problem}
Given that the sex of many species is an easily observable and usually unambiguous classification, it is surprising the number of microarray datasets in public repositories that lack the associated sample sex information. Sex-biased gene expression in normal and pathological tissues is a well recognised for both sex chromosome and autosomal genes. Sex biases also exist in the prevalence and severity of many common human diseases, such as cardiovascular disease and some cancers. As sex is a potential influencing factor of both pathological and non-pathological phenotypes, gene expression analyses that do not account for sex-specific effects could fail to identify a significant proportion of genes that contribute the condition under investigation. Therefore, the absence of sample sex information restricts the reuse of gene expression datasets where the researcher intends to factor the effect of sex in reanalysis or reinterpretation, or when intending to include such datasets in larger gene expression meta-analyses. 

This is why we developed MASSI, an R package for predicting the sex of samples in microarray datasets. The massi package allows researchers to expand their analyses to retrospectively incorporate sex as a variable, generate or confirm sex information associated with publicly available datasets, or to accurately predict the sex of samples missing sex information.
\clearpage

\section{Importing data to use in the massiR analysis}
The massi analysis begins by importing a standard gene expression data of normalised and log transformed probe values. The gene expression data can be in the form of a data.frame object and have the sample identifiers as the column names and the probe identifiers as the row names, or as an ExpressionSet object. The Y chromosome probe identifiers must be as a data.frame object with the probe identifiers as row.names.   

To load the included test massi gene expression matrix:
<<load the example data>>=
library(massiR)
data(massi.test.dataset)
@
The included gene expression matrix is composed of 60 samples and 1026 probes as a data.frame object.

To load the test probe list corresponding to the included data:
<<load the test probe list>>=
data(massi.test.probes)
@
The Included list of Y chromosome probes contains 56 probe identifiers as row.names as a data.frame object.

\section{Extracting the Y chromosome probe data}
The first step of the massiR analysis involves extracting the expression values for probes that correspond to Y chromosome genes. When the expression values for Y chromosome probes are extracted, the expression variance for each probe across all samples is calculated. This allows the identification of low variance probes, which are unlikely to be informative in sex classification. The user has the option of selecting a probe variation threshold, so only the most informative probes are used in the classification process. Deciding on a probe variation threshold can be informed by inspecting the automatically generated probe variation plot (Figure 1). In our experience, using the most variable 25-50\% of probes (typically 10-40 probes, depending on platform) produces good results. 

To extract data corresponsing to Y chromosome probes from the test dataset and look at a probe variation plot:

<<extract Y from test dataset calculate CV>>=
massi.y.out <- massi.y(massi.test.dataset, massi.test.probes)
@

<<plot the results from massi.y>>=
massi.y.plot(massi.y.out)
@

The plot pictured below is output to the R graphics device.

<<label=fig1too, echo=FALSE, include=FALSE>>=
massi.y.out <- massi.y(massi.test.dataset, massi.test.probes)
@
\setkeys{Gin}{width=1\linewidth}
\begin{figure}
\begin{center}
<<label=fig1, fig=TRUE, echo=FALSE, eps=FALSE, >>=

  barplot(height=massi.y.out[[2]], names.arg=massi.y.out[[1]], xpd=T,
          cex.names=0.5, las=2, ylab="Probe CV (%)")
  # Get the quantile values from the massi.y output
  quantiles <- massi.y.out[[3]]
  
  # add lines for the 0%, 25%, 50%, and 75% quartiles
  abline(h=quantiles[1:4], col=c("black", "red", "blue", "green"), lwd=2)
  legend("topleft",cex=0.7, title="Threshold (Quantile)",
         col=c("black", "red", "blue", "green"),
         fill= c("black", "red", "blue", "green"),
         legend=c("1 (0%)", "2 (25%)",
                  "3 (50%)", "4 (75%)"))
@
\end{center}
\caption{Expression variation (CV) of Y chromosome probes across all samples}
\label{fig:fig1}
\end{figure}

\clearpage

You have the option of using you own list of probes corresponding to Y chromosome genes or using the probe lists included with the package. The included lists correspond to popular microarray platforms and contain identifiers for probes that map uniquely to Y chromosome genes.

To load all the included probe lists:
<<load the included probe lists, results=hide>>=
 data(y.probes)
@
Check the names of the platforms for the probe lists.
<<y.probes names>>=
  names(y.probes)
@
The names of the probe lists correspond to Ensembl biomart attribute names.

After viewing the probe variation plot, a decision can be made regarding which probes to use in the clustering step. The massiR package includes methods for selecting probe variation thresholds based on quantiles. The threshold can be determined by quantiles of probe variance (CV): 1=All probes, 2=Upper 75\%, 3=Upper 50\%, 4=Upper 25\%. It is highly recommended that probe CV plot generated using the massi.y.plot function be inspected to inform threshold choice (Figure 1). The default threshold value is 3.



Once a probe threshold has been decided upon, run the massi.select function. This will return a data.frame with the samples as columns and the subset of selected y chromosome probes as row names.

<<run massi.select>>=
massi.select.out <- 
  massi.select(massi.test.dataset, massi.test.probes, threshold=4)
@

For instructions on obtaining probe identifiers for other platforms, see the section "Using biomaRt to obtain y chromosome probe lists"

\section{Predicting the sex of samples}

To classify samples as either male or female, clustering is performed using the values from the subset of Y chromosome probes  by implementing the partitioning around medoids algorithm to perform k-medoids clustering (Hennig 2013), where samples are assigned to one of two clusters. The two clusters are then compared using the probe expression values across all samples in each cluster. Samples within the cluster featuring the highest Y chromosome probe values are classed as male and those amongst the cluster with the lowest Y probe values classed as female. Results such sample probe mean, standard deviation and z-scores are reported in a table together with the sex predicted for each sample.

To predict the sex of the samples:
<<results = hide>>=
results <- massi.cluster(massi.select.out)
@

Extract the results for each sample:
<<results = hide>>=
sample.results <- data.frame(results[[2]])
@

<<>>=
head(sample.results)
@

As you can see, it is a relatively straighforward proceedure to produce a table with the predicted sex of each sample.

\section{Visualising the results}

The results of the massi analysis can easily be visualied using the massi.cluster.plot function and the data values derived from the previous steps. 
To run the massi.plot function:
<<results=hide>>=
massi.cluster.plot(massi.select.out, results)
@
This will produce a bar plot of mean values from the subset of Y chromosome probes used in K-medoids clustering (Figure 2), with the bar colours representing clusters with female as red and male as green. This wil also generate a heatmap with dendrogram of Y chromosome probes as rows and individual samples in columns (Figure 3) and a principal component plot showing clusters (Figure 4). 
\clearpage

\begin{figure}
\begin{center}
<<label=fig2, fig=TRUE, echo=FALSE, eps=FALSE, >>=
ord <- order(rowSums(abs(massi.select.out)),decreasing=T)
  heatmap.2(x=as.matrix(massi.select.out[ord,]), keysize=2, cexRow=0.7,
            key=T, trace="none", dendrogram="row", col=redgreen(75), scale="row")
@
\end{center}
\caption{Heat map with dendrogram of Y chromosome probes as rows and individual samples in columns}
\label{fig:fig2}
\end{figure}

\begin{figure}
\begin{center}
<<label=fig3, fig=TRUE, echo=FALSE, eps=FALSE, >>=
massi.cluster.results <- data.frame(results[[2]])
  massi.cluster.results.sort <- massi.cluster.results[order(massi.cluster.results$sample_sex),] # sort data by sex
  probe.means <- massi.cluster.results.sort$mean_y_probes_value # samples probe mean values
  probe.sd <- massi.cluster.results.sort$y_probes_sd # sample probe sd values
  sample.names <- massi.cluster.results.sort$sample_ID # set x-axis names
  plot.top <- ceiling(max(probe.means+probe.sd*1.1)) # set y-axis upper limit
  plot.bottom <- floor(min(probe.means-probe.sd*1.1)) # set y-axis lower limit
  sample.sex <- massi.cluster.results.sort$sample_sex # set the factor for bar color
  # create the plot
  barCenters <- barplot(probe.means, xpd=F, names.arg=results$ID, cex.names=0.7,
                        ylab="Chr.Y mean probe value +/- SD",
                        xlab="",
                        col=c("red", "green")[as.factor(sample.sex)],
                        las=2, ylim=c(plot.bottom,plot.top))
  segments(barCenters, probe.means-probe.sd, # add the sd bars
           barCenters, probe.means+probe.sd, lwd=0.8)
  legend("topleft", fill=c("red", "green"), title="predicted sex", ## add legend to plot
         legend=c("female", "male"), cex=0.5, )
@
\end{center}
\caption{Mean values of the subset of Y chromosome probes used in K-medoids clustering. The bar colours represent clusters, which were assigned as female (red) and male (green)}
\label{fig:fig3}
\end{figure}

\begin{figure}
\begin{center}
<<label=fig4, fig=TRUE, echo=FALSE, eps=FALSE, >>=
## generate PC plot of clusters
  k.medoids.results <- results[[1]]
  clusplot(t(massi.select.out), k.medoids.results$clustering, color=TRUE, shade=FALSE, main="",cex.txt=0.5,
           labels=2, lines=0)
@
\end{center}
\caption{Principal component plot of male and female clusters}
\label{fig:fig4}
\end{figure}

\clearpage

\section{Check for potential sex bias using the dip test}

\section{Using biomaRt to obtain y chromosome probe lists}

\clearpage

\section{References}
  Christian Hennig (2013). fpc: Flexible procedures for clustering.
  R package version 2.1-6.
  http://CRAN.R-project.org/package=fpc
  
  Martin Maechler (2013). diptest: Hartigan's dip test statistic for unimodality - 
  corrected code.
  R package version 0.75-5. http://CRAN.R-project.org/package=diptest
  
  Gregory R. Warnes, Ben Bolker, Lodewijk Bonebakker, Robert Gentleman,
  Wolfgang Huber Andy Liaw, Thomas Lumley, Martin Maechler, Arni Magnusson,
  Steffen Moeller, Marc Schwartz and Bill Venables (2013).
  gplots: Various R programming tools for plotting data.
  R package version 2.12.1.
  http://CRAN.R-project.org/package=gplots
  
  Mapping identifiers for the integration of genomic datasets with the R/Bioconductor package biomaRt.
  Steffen Durinck, Paul T. Spellman, Ewan Birney and Wolfgang Huber, Nature Protocols 4, 1184-1191
  (2009).

  BioMart and Bioconductor: a powerful link between biological databases and microarray data analysis.
  Steffen Durinck, Yves Moreau, Arek Kasprzyk, Sean Davis, Bart De Moor, Alvis Brazma and Wolfgang
  Huber, Bioinformatics 21, 3439-3440 (2005).
  
\end{document}
